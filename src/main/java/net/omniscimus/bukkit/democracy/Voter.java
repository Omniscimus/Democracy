package net.omniscimus.bukkit.democracy;

import java.util.UUID;

/**
 * Represents a player who might try to vote on a proposal.
 */
public class Voter {

    private long loginTime, logoutTime;
    private UUID playerId;

    /**
     * Creates a new Voter instance.
     * 
     * @param playerId
     *            The Unique User ID of the player, as generated by Minecraft.
     */
    public Voter(UUID playerId) {
        this.playerId = playerId;
    }

    /**
     * Gets the Unique User ID of the player, as generated by Minecraft.
     * 
     * @return the player's UUID.
     */
    public UUID getId() {
        return playerId;
    }

    /**
     * Changes the stored time at which this Voter logged in to the server.
     * 
     * @param loginTime
     *            The new login time, in milliseconds since the Unix Epoch.
     */
    public void setLoginTime(long loginTime) {
        this.loginTime = loginTime;
    }

    /**
     * Changes the stored time at which this Voter logged out of the server.
     * 
     * @param logoutTime
     *            The new logout time, in milliseconds since the Unix Epoch.
     */
    public void setLogoutTime(long logoutTime) {
        this.logoutTime = logoutTime;
    }

    /**
     * Adds the playtime of this session to the saved amount of playtime for the
     * current week. This function requires that the login time and the logout
     * time have been set for this Voter.
     */
    public void updatePlaytime() {
        long playedTime = logoutTime - loginTime;
        long totalPlaytime = Configuration.getPlaytime(playerId, Main.getCurrentWeek()) + playedTime;
        Configuration.setPlaytime(playerId, Main.getCurrentWeek(), totalPlaytime);
    }

    /**
     * Checks if the player is allowed to vote. This requires the player to have
     * opted in to the system and meet the playtime requirement.
     * 
     * @return true if the player can vote
     */
    public boolean isInElectorate() {
        return Configuration.playerHasOptedIn(playerId)
                && Configuration.getPlaytimeRequirement() <= Configuration.getPlaytime(playerId, Main.getCurrentWeek());
    }

    /**
     * Changes whether this Voter has opted in to the system. If he has opted
     * in, then his weekly playtime will be saved to check the voting
     * requirement when he votes.
     * 
     * @param optIn
     *            A boolean indicated whether the player has opted in to the
     *            voting system.
     */
    public void setOptin(boolean optIn) {
        Configuration.setPlayerOptIn(playerId, optIn);
    }

    /**
     * Records a vote on a certain option for a certain proposal for this Voter.
     * Note that this is irreversible because it is not stored for which option
     * each player voted (anonymous voting). It is recorded that this Voter has
     * voted, to prevent duplicate voting.
     * 
     * @param proposalId
     *            The ID of the proposal.
     * @param optionId
     *            The ID of the option to vote on.
     * @return {@code true} if the vote was cast successfully; {@code false} if
     *         the player had already voted, or if voting is not enabled for
     *         this proposal, or if the Voter did not meet the weekly playtime
     *         requirement, or if the Voter has not opted in to the voting
     *         system.
     */
    public boolean vote(int proposalId, int optionId) {
        if (Configuration.playerHasVoted(proposalId, playerId) || !isInElectorate()) {
            return false;
        }
        if (Configuration.getVotingEnabled(proposalId)) {
            Configuration.setProposalOptionVotes(proposalId, optionId,
                    Configuration.getProposalOptionVotes(proposalId, optionId) + 1);
            Configuration.setPlayerHasVoted(proposalId, playerId, true);
            return true;
        } else
            return false;
    }

}
